// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	storage "github.com/pavelmemory/faceit-users/internal/storage"
)

// MockTransactioner is a mock of Transactioner interface
type MockTransactioner struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionerMockRecorder
}

// MockTransactionerMockRecorder is the mock recorder for MockTransactioner
type MockTransactionerMockRecorder struct {
	mock *MockTransactioner
}

// NewMockTransactioner creates a new mock instance
func NewMockTransactioner(ctrl *gomock.Controller) *MockTransactioner {
	mock := &MockTransactioner{ctrl: ctrl}
	mock.recorder = &MockTransactionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactioner) EXPECT() *MockTransactionerMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockTransactioner) WithTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockTransactionerMockRecorder) WithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockTransactioner)(nil).WithTx), arg0, arg1)
}

// WithoutTx mocks base method
func (m *MockTransactioner) WithoutTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithoutTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithoutTx indicates an expected call of WithoutTx
func (mr *MockTransactionerMockRecorder) WithoutTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithoutTx", reflect.TypeOf((*MockTransactioner)(nil).WithoutTx), arg0, arg1)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// WithTx mocks base method
func (m *MockStorage) WithTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx
func (mr *MockStorageMockRecorder) WithTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockStorage)(nil).WithTx), arg0, arg1)
}

// WithoutTx mocks base method
func (m *MockStorage) WithoutTx(arg0 context.Context, arg1 func(storage.Runner) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithoutTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithoutTx indicates an expected call of WithoutTx
func (mr *MockStorageMockRecorder) WithoutTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithoutTx", reflect.TypeOf((*MockStorage)(nil).WithoutTx), arg0, arg1)
}

// Persist mocks base method
func (m *MockStorage) Persist(ctx context.Context, run storage.Runner, user storage.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", ctx, run, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Persist indicates an expected call of Persist
func (mr *MockStorageMockRecorder) Persist(ctx, run, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockStorage)(nil).Persist), ctx, run, user)
}

// Retrieve mocks base method
func (m *MockStorage) Retrieve(ctx context.Context, run storage.Runner, id string, forUpdate bool) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, run, id, forUpdate)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve
func (mr *MockStorageMockRecorder) Retrieve(ctx, run, id, forUpdate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockStorage)(nil).Retrieve), ctx, run, id, forUpdate)
}

// Update mocks base method
func (m *MockStorage) Update(ctx context.Context, runner storage.Runner, id string, user storage.User) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, runner, id, user)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockStorageMockRecorder) Update(ctx, runner, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStorage)(nil).Update), ctx, runner, id, user)
}

// Delete mocks base method
func (m *MockStorage) Delete(ctx context.Context, runner storage.Runner, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, runner, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStorageMockRecorder) Delete(ctx, runner, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, runner, id)
}
